#! /usr/bin/env pwsh

<#
  .SYNOPSIS
  Create an MS SQL Server application database and roles for application and application_readonly,
  and alter authorization to an applicationdatabaseowner account
  
   .DESCRIPTION
  Create an MS SQL Server application database and roles for application and application_readonly, 
  and alter authorization to an applicationdatabaseowner account.
  
  - the application and application_readonly roles will be login roles with password either 
    specified by you or generated by this script. 
  - If the passwords are generated by this script, they will be printed as the first 2 lines
    of output of this script. 
   
  .LINK
  https://github.com/chrisfcarroll/ApplicationDatabases

#>
 [CmdletBinding(DefaultParameterSetName = 'Run')]
Param(
  ##A name for the new database
  [string][ValidatePattern('(".+"|[^"]+)')]$databaseName="appname",

  ##The MS SQL Server Instance you wish to target. See SQLCmd help for possible formats, which is currently: [protocol:]server[\instance_name][,port]
  ##Defaults to $env:SQLCMDSERVER if set, or "." if not
  [string][Alias('S')]$serverInstance=  $env:SQLCMDSERVER ?? ".",

  ##The Login that can run this script. This login must have Alter Any Login and Create Any Database permissions 
  ##on the server. Defaults to $env:SQLCMDUSER if set.
  [string][Alias('U')]$ciLogin= $env:SQLCMDUSER,

  ##The password for -ciLogin. Defaults to $env:SQLCMDPASSWORD if that has been set.
  [string][Alias('P')]$ciLoginPassword= $env:SQLCMDPASSWORD,

  ##The name of the Login to Create having read & write access to the new database. Defaults
  ##to the same as -databaseName
  [string][Parameter(ParameterSetName='Run')]$appLogin,
  
  ##If true, then the -appLogin's user in the database will be made a member of the owner group.
  ##Use this for applications that use one login both for application database initialisation and
  ##for running the application.
  [switch][Parameter(ParameterSetName='Run')]$appLoginIsDbOwner,

  ##The password to use for -appLogin. If not is given, one will be generated and displayed as the
  ##first line of output of this script.
  [string][Parameter(ParameterSetName='Run')]$appLoginPassword,
  
  ##The name of the Login to Create having read access to the new database. Defaults to <databaseName>_readonly
  [string][Parameter(ParameterSetName='Run')]$appReadonlyLogin,
  
  ##The password to use for -readonlyAppLogin. If none is given, one will be generated and displayed as the
  ##second or first line of output of this script.
  [string][Parameter(ParameterSetName='Run')]$appReadonlyLoginPassword,
  
  ##Leave this blank to use the server default language for the new logins
  [string][Parameter(ParameterSetName='Run')]$loginLanguage,

  ## Leave this blank to use the server default collation for the new database
  [string][Parameter(ParameterSetName='Run')]$collation,

  ##If set, the SQL scripts will be echoed but not run
  [switch]$dryRun,

  ##Shows help, then stop.
  [switch]$help,

  ##Shows full help, then stop.
  [switch]$helpFull,

  ##If set, this Login will be made the owner of the newly created database. If blank, the new database will
  ##remain owned by -ciLogin.
  ## - The Login must already exist, and -ciLogin must have Impersonate Permisson on it.
  ## - Creating the databaseOwner Login must be done once-per server to create it, run this script once 
  ##   interactively with -bootstrapSysAdminLogin='<sysadminlogin>'
  ##
  ##See https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql#best-practice
  ##on the idea of using a Disabled Login as the database Owner. 
  [string][Parameter(ParameterSetName='Run')]$databaseOwner='ApplicationDatabaseOwner',
  
  ## Delete the Database and the associated Roles
  [switch][Parameter(ParameterSetName='Run')][Alias("Down")][Alias("dropDatabaseAndLogins")]$deleteDatabaseAndLogins,

  ##A sysadmin login that can bootstrap the scripts for ci database handover. Run this once per server to create a 
  ## databaseOwner Login, which will be disabled, and which can be used as an owner for application databases.
  [Parameter(ParameterSetName='Bootstrap')][string]$saLogin,

  ##Password for -saLogin, which defaults to Env:\SQLCMDPASSWORD
  [Parameter(ParameterSetName='Bootstrap')][string]$saLoginPassword=$env:SQLCMDPASSWORD,

  [Parameter(ParameterSetName='Bootstrap')][switch]$bootstrap,

  [Parameter(ParameterSetName='Bootstrap')][switch]$uninstallBootstrap

)

function sqlcmdGet($query, $db, [switch]$onErrorStop){
  $r=(sqlcmd -S $serverInstance -d $db -U $ciLogin -P $ciLoginPassword -e -X -Q $query)
  if(-not $r -or $r[1] -match "Msg \d+, Level \d+, State \d+") 
    {throw "SQL command failed on server $serverInstance database $db : $query"}
  return $r
}
function getSQLScalar($query, $db, [switch]$onErrorStop){
  $r=(sqlcmdGet @PSBoundParameters)
  return ($r.Length -and $r.Length -gt 2) ? $r[3] : $r
}

function runOrDryRun($command, $db, [switch]$onErrorStop, $login=$ciLogin, $password=$ciLoginPassword){
  if($dryRun){ "-d $db :`n$command" }
  else{
    $r=(sqlcmd -S $serverInstance -d $db -U $login -P $Password -e -X -j -Q $command)
    return $? ? $r : $?
  }
}

if($helpFull){ Get-Help $PSCommandPath ; Get-Help $PSCommandPath -Parameter '*' ; Exit }
if($help){ Get-Help $PSCommandPath ; Exit}

function isQuoted([string]$str){return $str -like '`[*`]'}
function quote([string]$str){return ((isQuoted $str) ? $str : '['+$str+']') }
function unQuote([string]$str){return ((isQuoted $str) ? $str.Substring(1,$str.Length-2) : $str) }
$validTSqlIdentifier='^[_@#\p{L}][$_@#\p{L}\d]*$'

function isValidTSqlIdentifier([string]$str){return ($str -cmatch $validTSqlIdentifier) -or ($str -like '`[*`]') }

function qadd([string]$left,[string]$right,$quotemark='"'){
  $isQl=(isQuoted $left)
  $isQr=(isQuoted $right)
  $l= $isQl ? $left.Substring(1,$left.Length-2)   : $left
  $r= $isQr ? $right.Substring(1,$right.Length-2) : $right
  $a= ($isQl -or $isQr) ? (quote ($l + $r) ) : ($l + $r)
  return $a
}

function sanitiseAndAutocompleteParameters{
  if(-not (isValidTSqlIdentifier $databaseName)){
      throw "$databaseName is not a valid database name. Either surround it in with [square brackets] or use a different name."
  }
  $script:databaseOwner= [string]::IsNullOrWhiteSpace( $databaseOwner ) ? (qadd $databaseName "_owner") : $databaseOwner.ToLower()
  $script:appLogin= [string]::IsNullOrWhiteSpace( $appLogin ) ? $databaseName : $appLogin.ToLower()
  $script:readonlyAppLogin= [string]::IsNullOrWhiteSpace( $appReadonlyLogin ) ? (qadd $databaseName "_readonly") : $appReadonlyLogin.ToLower()
}
function validateUpParametersElseForceDryRun{

  $requireds= '$serverInstance','$databaseName','$databaseOwner','$appLogin','$appReadonlyLogin'
  $invalid= $requireds.Where( {-not (Invoke-Expression $_)})
  if($invalid.Count){
    $script:dryRun=$true
    write-warning "dry running because you missed a parameter: $invalid"
  }

  $identifiers= '$databaseName','$databaseOwner','$appLogin','$appReadonlyLogin'
  $invalid= $identifiers.Where( {-not (isValidTSqlIdentifier (Invoke-Expression $_))})
  if($invalid.Count){
    $script:dryRun=$true
    write-warning "dry running because some parameters are not valid identifiers: $invalid"
    write-warning "NB to supply a quoted string in powershell,bash,etc you must quote the quotes, e.g.:  `'`"Quoted Name!`"`' "
  }
}
function validateDownParametersElseForceDryRun{
  $requireds= ('$serverInstance','$databaseName','$databaseOwner','$appLogin','$appReadonlyLogin')
  $invalids= $requireds | Where-Object { -not (Invoke-Expression $_) }

  if($invalid.Count){
    $script:dryRun=$true
    write-warning "dry running because you missed a parameter: $([string]::Join(", ", $invalids))"
  }
}
function validateBootstrapParametersElseForceDryRun{
  $requireds= ('$serverInstance','$ciLogin','$saLogin')
  $invalids= $requireds | Where-Object { -not (Invoke-Expression $_) }

  if($invalid.Count){
    $script:dryRun=$true
    write-warning "dry running because you missed a parameter: $([string]::Join(", ", $invalids))"
  }
}



function New-Password([int]$length=12){ 
  1..($length * 3) |
          ForEach-Object{ Get-Random -Minimum 48 -Maximum 122 } |
          Where-Object { $_ -lt 58 -or $_ -gt 64 } | Where-Object {$_ -lt 91 -or $_ -gt 96 } |
          ForEach-Object{ [Char]$_ } | Select-Object -first $length | 
          ForEach-Object {$agg=""} {$agg += $_} {$agg} 
}

function bootstrapCiDatabaseHandover{
  $ciadminPassword= (New-Password 30)
  $bootstrap1=@"
    Use Master
    ;
    Create Login ci With Password = `'$ciLoginPassword`'
    ;
    Create Certificate Login_ciadmin
       Encryption By Password = `'$ciadminPassword`'
       With Subject = 'Permission To Alter Authorization On Database',
       Expiry_Date ='2299-01-01'
    Create Login ciadmin From Certificate Login_ciadmin

    Alter Server Role sysadmin ADD MEMBER ciadmin;

    Create Server Role Role_ci
    Alter Server Role Role_ci Add Member ci
    Go
    ;
    Create Schema ci
    Go
    ;
    Use Master
    Create User ci from Login ci
    Revoke Execute on Schema::ci From Public;
    Grant Execute On Schema::ci to ci
    Go
"@

  $bootstrap2=@"
        Create Or Alter Procedure Ci.CreateDatabaseWithOwner
        @dbname nvarchar(128),
        @dbowner nvarchar(128),
        @appLogin nvarchar(128),
        @appLoginPassword nvarchar(128),
        @appReadonlyLogin nvarchar(128),
        @appReadonlyLoginPassword nvarchar(128),
        @appLoginIsDbOwner int = 0
    As
    Begin
        Declare @isCiLogin bit= (Select IS_SRVROLEMEMBER('Role_ci', SYSTEM_USER) |
                                        IS_SRVROLEMEMBER('sysadmin', SYSTEM_USER))
        If ISNULL(@isCiLogin,0)=0
        Begin
          Declare @msg nvarchar(128) = 'Current_User is not in Server Role Role_ci'
          ; Throw 50000, @msg, 1 ;
        End
        Else
        Begin
          Declare @CreateDb nvarchar(max)
          Declare @CreateDbUsers nvarchar(max)
          Set @dbname=QuoteName(@dbname)
          Set @Dbowner=QuoteName(@Dbowner)
          Set @appLogin=QuoteName(@appLogin)
          Set @appReadonlyLogin=QuoteName(@appReadonlyLogin)
          Set @appLoginPassword=REPLACE(@appLoginPassword, '''', '''''')
          Set @appReadonlyLoginPassword=REPLACE(@appReadonlyLoginPassword, '''', '''''')

          Set @CreateDb = FormatMessage('
              Begin Try Create Login %s With Password = ''''; Alter Login %s Disable; End Try Begin Catch Print Error_Message() End Catch
              Begin Try Create Database %s; End Try Begin Catch Print Error_Message() End Catch
              Alter Authorization On Database::%s TO %s;
              Begin Try Create Login %s With Password= ''%s'', Default_Database= %s End Try Begin Catch Print Error_Message() End Catch
              Begin Try Create Login %s With Password= ''%s'', Default_Database= %s End Try Begin Catch Print Error_Message() End Catch
              ',
                @Dbowner, @Dbowner,
                @Dbname,
                @Dbname, @Dbowner,
                @appLogin, @appLoginPassword, @Dbname,
                @appReadonlyLogin,@appReadonlyLoginPassword, @Dbname)

          Set @Createdbusers=FORMATMESSAGE('
              Use %s
              Begin Try
                Create User %s for Login %s
                  Alter Role db_datareader Add Member %s
                  Alter Role db_datawriter Add Member %s
                  If %i = 1 Begin Alter Role db_owner Add Member %s End
              End Try Begin Catch Print Error_Message() End Catch
              Begin Try
                Create User %s for Login %s
                  Alter Role db_datareader Add Member %s
              End Try Begin Catch Print Error_Message() End Catch
              Begin Try
                Create User %s for Login %s
                  Alter Role db_owner Add Member %s
              End Try Begin Catch Print Error_Message() End Catch',
              @Dbname,
                @appLogin, @appLogin,
                  @appLogin,
                  @appLogin,
                  @appLoginIsDbOwner, @appLogin,
                @appReadonlyLogin, @appReadonlyLogin,
                  @appReadonlyLogin,
                SYSTEM_USER, SYSTEM_USER,
                  SYSTEM_USER)

          Print @Createdb
          Execute sp_executesql @CreateDb

          Print @Createdbusers
          Execute sp_executesql @CreateDbUsers
        End
    End;
    Go
    ;
    Add Signature To Ci.CreateDatabaseWithOwner
      By Certificate Login_Ciadmin
      With Password = `'$ciadminPassword`';
    Go
    ;
    Create Or Alter Procedure Ci.DropDatabaseWithOwner
        @dbname nvarchar(128),
        @dbowner nvarchar(128),
        @appLogin nvarchar(128),
        @appReadonlyLogin nvarchar(128)
    As
    Begin
        Set @dbname=QuoteName(@dbname)
        Set @Dbowner=QuoteName(@Dbowner)
        Set @appLogin=QuoteName(@appLogin)
        Set @appReadonlyLogin=QuoteName(@appReadonlyLogin)

        Declare @msg Nvarchar(max)
        Declare @isCiLogin bit= (Select IS_SRVROLEMEMBER('Role_ci', SYSTEM_USER) |
                                        IS_SRVROLEMEMBER('sysadmin', SYSTEM_USER))
        Declare @tableCount int

        Begin Try
          If EXISTS(Select * from sysdatabases where QUOTENAME(Name)=@Dbname)
          Begin
            Declare @checkTables Nvarchar(max)=
              FORMATMESSAGE('Select @rows=Count(*) from %s.Information_Schema.Tables',@Dbname)
            Execute sp_executesql @checkTables, N'@rows int Output', @rows=@tableCount Output
          End
        End Try
        Begin Catch
            Throw
    --       Set @msg= FORMATMESSAGE('Error attempting to check tables in %s',@Dbname)
    --       ; Throw 50000, @msg, 1 ;
        End Catch

        If ISNULL(@isCiLogin,0)=0
        Begin
          Set @msg = 'Current_User is not in Server Role Role_ci'
          ; Throw 50000, @msg, 1 ;
        End
        Else If @tableCount>0
        Begin
          Set @msg = FORMATMESSAGE('Won''t drop database %s because tables have been created.
          First confirm no data will be lost, then drop the tables. Then you can Drop the database.',
            @Dbname)
          ; Throw 50000, @msg, 1 ;
        End
        Else
        Begin
          Declare @dropDb nvarchar(max)

          Set @dropDb = FormatMessage('
              Begin Try Drop Login %s End Try Begin Catch Print ERROR_MESSAGE() End Catch
              Begin Try Drop Login %s End Try Begin Catch Print ERROR_MESSAGE() End Catch
              Begin Try Drop Database %s End Try Begin Catch Print ERROR_MESSAGE() End Catch
              Begin Try Drop Login %s End Try Begin Catch Print ERROR_MESSAGE() End Catch',
                @appReadonlyLogin,
                @appLogin,
                @Dbname,
                @Dbowner)

          Print @dropDb
          Execute sp_executesql @dropDb
        End
    End;
    Go
    ;
    Add Signature To Ci.DropDatabaseWithOwner
      By Certificate Login_Ciadmin
      With Password = `'$ciadminPassword`';
    Go
"@

  runOrDryRun $bootstrap1 'master' -login $saLogin -password $saLoginPassword `
    &&
      runOrDryRun $bootstrap2 'master' -login $saLogin -password $saLoginPassword `
}

function uninstallBootstrap {
  $uninstall=@"
    Drop Procedure ci.CreateDatabaseWithOwner
    Drop Procedure ci.DropDatabaseWithOwner
    Drop schema ci
    Drop user ci
    Alter Server Role Role_ci Drop Member ci
    Drop Server Role Role_ci
    Drop Login ciadmin
    Drop Certificate Login_ciadmin
    Drop Login ci
"@

  "Uninstalling Application Database Procedures and ci schema, server role, login, certificate."

  runOrDryRun $uninstall 'master' -login $saLogin -password $saLoginPassword

}

function Up {

  if(-not $appLoginPassword){
    $appLoginPassword= New-Password 20
    $appLoginPassword
    $didGeneratePassword=$true
  }
  if(-not $appReadonlyLoginPassword){
    $appReadonlyLoginPassword= New-Password 20
    $appReadonlyLoginPassword
    $didGeneratePassword=$true
  }

  if($didGeneratePassword)
  {
    write-warning "-----------------------------------------------------
You did not provide passwords, so passwords were generated with Get-Random and shown above this line."
  }

  $collationClause= ($collation) ? "With COLLATE $collation" : ""
  $languageClause= ($loginLanguage) ? ", Default_Language=$loginLanguage" : ""
  $databaseOwner= ($databaseOwner) ? $databaseOwner : $ciLogin
  $appLoginIsDbOwnerN= $appLoginIsDbOwner ? 1 : 0 

  "
-----------------------------------------------------
  Will log in to Server=$serverInstance as User $($ciLogin ?? "(Integrated Security)") to create:
  
    Database=$databaseName $collationClause
    with
    database Owner=$databaseOwner
    application Login=$appLogin $languageClause
    application readonly login=$appReadonlyLogin $languageClause
    application login is dbowner= $appLoginIsDbOwner
    Passwords generate by: $(if($didGeneratePassword){"This script"}else{"You"})
-----------------------------------------------------

starting ...
"
  
  runOrDryRun "Execute master.Ci.CreateDatabaseWithOwner
          @dbname  = `'$databaseName`',
          @dbowner = `'$databaseOwner`',
          @appLogin = `'$appLogin`',
          @appLoginPassword = `'$appLoginPassword`',
          @appReadonlyLogin = `'$appReadonlyLogin`',
          @appReadonlyLoginPassword = `'$appReadonlyLoginPassword`',
          @appLoginIsDbOwner = $appLoginIsDbOwnerN
        -- TODO : collationClause, languageClause
    "  'master'
}

function Down{
  
  "-----------------------------------------------------
  Will log in to Server=$serverInstance as User $($ciLogin ?? "(Integrated Security)") to Drop Database and Logins:
    
      database=$databaseName
      database Owner=$databaseOwner
      Application Login=$appLogin
      Application Readonly Login=$appReadonlyLogin

  -----------------------------------------------------

  starting ...
  "

  $dbExists=[int](getSQLScalar "Select Count(*) from master..sysdatabases where name = `'$databaseName`'" "master")
  if($dbExists){
    $tablesExistQ=(getSQLScalar "$executeAs Select Count(*) from $databaseName.information_schema.tables" "master")
    $tablesExist= [int]$tablesExistQ -gt 0
  }
  if ($dbExists -and $tablesExist)
  {
    write-warning "Aborted Drop Database $databaseName and Logins because tables have been created. First Drop the Tables."
  }
  else
  {
    runOrDryRun "Execute Master.Ci.DropDatabaseWithOwner
        @dbname = `'$databaseName`',
        @dbowner = `'$databaseOwner`',
        @appLogin = `'$appLogin`',
        @appReadonlyLogin = `'$appReadonlyLogin`'
      " 'master'
  }
}

sanitiseAndAutocompleteParameters

if($uninstallBootstrap){
  validateBootstrapParametersElseForceDryRun
  uninstallBootstrap
}
elseif($bootstrap)
{
  validateBootstrapParametersElseForceDryRun
  bootstrapCiDatabaseHandover
}
elseif($deleteDatabaseAndLogins)
{
  validateDownParametersElseForceDryRun
  Down
}
else
{
  validateUpParametersElseForceDryRun
  Up
}